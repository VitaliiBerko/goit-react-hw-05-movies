{"version":3,"file":"static/js/269.358f7f3d.chunk.js","mappings":"mMA4CA,UAzCgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACHF,IACLD,GAAa,IACbI,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,gBAAGC,EAAH,EAAGA,QAAH,OACJR,EACEQ,EAAQC,KAAI,YACV,MAAO,CAAEC,OAD0B,EAAtBA,OACIC,QADkB,EAAdA,QAEtB,IAJC,IAOLC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,SAAQ,kBAAMd,GAAa,EAAnB,IACZ,GAAE,CAACC,KAGF,gCACGF,IAAa,wCAEd,0BACE,wBACGF,EAAQU,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACtB,OACE,2BACE,qCAAaD,MACb,uBAAIC,MAFGA,EAKZ,SAGHZ,EAAQkB,SAAU,wEAGzB,C,6MCrCKC,G,QAAM,oCACNC,EAAW,+BAEJC,EAAc,mCAAG,6GAEHC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,uCACqBD,IAHlB,cAEpBI,EAFoB,yBAKnBA,EAASC,MALU,gCAO1BC,EAAAA,GAAAA,MAAY,KAAMC,SAPQ,yDAAH,qDAWdC,EAAoB,mCAAG,yGAAOC,EAAP,+BAAgB,GAAhB,kBAETN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iCACeD,EADf,kBAC4BS,IAHnB,cAE1BL,EAF0B,yBAKzBA,EAASC,MALgB,gCAOhCC,EAAAA,GAAAA,MAAY,KAAMC,SAPc,yDAAH,qDAWpBG,EAAoB,mCAAG,WAAMzB,GAAN,gGAETkB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAhB,EADA,oBACmBe,IAHV,cAE1BI,EAF0B,yBAKzBA,EAASC,MALgB,gCAOhCC,EAAAA,GAAAA,MAAY,KAAMC,SAPc,yDAAH,sDAWpBI,EAAY,mCAAG,WAAM1B,GAAN,gGAEDkB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAhB,EADA,4BAC2Be,IAH1B,cAElBI,EAFkB,yBAKjBA,EAASC,MALQ,gCAOxBC,EAAAA,GAAAA,MAAY,KAAMC,SAPM,yDAAH,sDAUZnB,EAAe,mCAAG,WAAMH,GAAN,gGAEJkB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAhB,EADA,4BAC2Be,IAHvB,cAErBI,EAFqB,yBAKpBA,EAASC,MALW,gCAO3BC,EAAAA,GAAAA,MAAY,KAAMC,SAPS,yDAAH,qD","sources":["pages/MovieDetails/Reviews/Reviews.jsx","servicec/API.service.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchApiReviews } from 'servicec/API.service';\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    setIsLoading(true);\n    fetchApiReviews(movieId)\n      .then(({ results }) =>\n        setReviews(\n          results.map(({ author, content }) => {\n            return { author, content };\n          })\n        )\n      )\n      .catch(error => console.log(error))\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <h2>Loading...</h2>}\n\n      <div>\n        <ul>\n          {reviews.map(({ author, content }) => {\n            return (\n              <li key={content}>\n                <h2>Author: {author}</h2>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      {!reviews.length && <h2>Sorry. We dont have review for this movie</h2>}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst KEY = 'f4238f5bd8cc05dfda59a3450fa27d5e';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const fetchApiMovies = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchApiSearchMovies = async (search = '') => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${KEY}&query=${search}`\n    );\n    return response.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchApiMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchApiCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\nexport const fetchApiReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n"],"names":["useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","useEffect","fetchApiReviews","then","results","map","author","content","catch","error","console","log","finally","length","KEY","BASE_URL","fetchApiMovies","axios","response","data","toast","message","fetchApiSearchMovies","search","fetchApiMovieDetails","fetchApiCast"],"sourceRoot":""}